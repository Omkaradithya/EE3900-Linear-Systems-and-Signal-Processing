# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1e8mTRdnN60mC5c33iVJV43RgxItt5NJj
"""

import numpy as np
import matplotlib.pyplot as plt
from sympy.matrices import Matrix

#input points
A=np.array([0,2])
B=np.array([1,1])
C=np.array([4,4])
D=np.array([3,5])

#checking if opposite sides are parallel
a = A-B
b = B-C
c = C-D
d = D-A
print(a,b,c,d)
#a and b are in the same ratio, as well as c and d, so they are opposite and parallel

#Finding one of the angle
print(np.transpose(a)@b)

#function for line generation
def line_gen(A,B):
  len =10
  x_AB = np.zeros((2,len))
  lam_1 = np.linspace(0,1,len)
  for i in range(len):
    temp1 = A + lam_1[i]*(B-A)
    x_AB[:,i]= temp1.T
  return x_AB

#generating lines
x_AB = line_gen(A,B)
x_BC = line_gen(B,C)
x_CD = line_gen(C,D)
x_DA = line_gen(D,A)
x_AC = line_gen(C,A)
x_BD = line_gen(D,B)

#plotting the quadrilateral
plt.plot(x_AB[0,:],x_AB[1,:],label='$AB$')
plt.plot(x_BC[0,:],x_BC[1,:],label='$BC$')
plt.plot(x_CD[0,:],x_CD[1,:],label='$CD$')
plt.plot(x_DA[0,:],x_DA[1,:],label='$DA$')
plt.plot(x_AC[0,:],x_AC[1,:],label='$AC$')
plt.plot(x_BD[0,:],x_BD[1,:],label='$BD$')

#plotting points
plt.text(A[0] * (1+0.2 ), A[1] * (1-0.2) , 'A (0,2)')
plt.text(B[0] * (1-0.2 ), B[1] * (1-0.2) , 'B (1,1)')
plt.text(C[0] * (1 ), C[1] * (1 + 0.1) , 'C (4,4)')
plt.text(D[0] * (1 ), D[1] * (1 + 0.1) , 'D (3,5)')

plt.xlabel('$x$')
plt.ylabel('$y$')
plt.legend(loc='best')
plt.grid() # minor
plt.axis('equal')
plt.show()